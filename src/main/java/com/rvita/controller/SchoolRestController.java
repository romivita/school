package com.rvita.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.rvita.model.School;
import com.rvita.repository.SchoolRepository;

import javassist.NotFoundException;
import javassist.tools.web.BadHttpRequest;

@RestController
@RequestMapping("/school")
public class SchoolRestController {
	@Autowired // This means to get the bean called schoolRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private SchoolRepository schoolRepository;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<School> findAll() {
		// This returns a JSON or XML with the schools
		return schoolRepository.findAllByOrderByIdAsc();
	}

	@GetMapping(path = "/{id}")
	public School findById(@PathVariable long id) throws ResponseStatusException {
		if (schoolRepository.existsById(id)) {
			Optional<School> student = schoolRepository.findById(id);
			return student.get();
		} else {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "School Not Found");
		}
	}

	@PostMapping(path = "/add")
	public @ResponseBody School create(@RequestParam String name) {
		School school = new School();
		school.setName(name);
		return schoolRepository.save(school);
	}

	@PutMapping(path = "/{id}")
	public School update(@PathVariable long id, @RequestBody School school) throws ResponseStatusException {
		if (schoolRepository.existsById(id)) {
			school.setId(id);
			return schoolRepository.save(school);
		} else {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "School Not Found");
		}
	}

	@DeleteMapping(path = "/{id}")
	public void delete(@PathVariable long id) {
		schoolRepository.deleteById(id);
	}
}
